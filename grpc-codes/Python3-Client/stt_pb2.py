# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: stt.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='stt.proto',
  package='SpeechToText',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\tstt.proto\x12\x0cSpeechToText\"I\n\x0bSpeechChunk\x12\x0f\n\x07\x63ontent\x18\x01 \x01(\x0c\x12\r\n\x05token\x18\x02 \x01(\t\x12\x0c\n\x04lang\x18\x03 \x01(\t\x12\x0c\n\x04\x64\x65mo\x18\x04 \x01(\t\"\x91\x01\n\x0fTranscriptChunk\x12\x0b\n\x03\x61sr\x18\x01 \x01(\t\x12\x12\n\ntranscript\x18\x02 \x01(\t\x12\x10\n\x08is_final\x18\x03 \x01(\x08\x12\x12\n\nconfidence\x18\x04 \x01(\x02\x12\x0e\n\x06\x61nswer\x18\x05 \x01(\t\x12\x11\n\timage_url\x18\x06 \x01(\t\x12\x14\n\x0cimage_yes_no\x18\x07 \x01(\t2\\\n\x08Listener\x12P\n\x0e\x44oSpeechToText\x12\x19.SpeechToText.SpeechChunk\x1a\x1d.SpeechToText.TranscriptChunk\"\x00(\x01\x30\x01\x62\x06proto3')
)




_SPEECHCHUNK = _descriptor.Descriptor(
  name='SpeechChunk',
  full_name='SpeechToText.SpeechChunk',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='content', full_name='SpeechToText.SpeechChunk.content', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='token', full_name='SpeechToText.SpeechChunk.token', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='lang', full_name='SpeechToText.SpeechChunk.lang', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='demo', full_name='SpeechToText.SpeechChunk.demo', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=27,
  serialized_end=100,
)


_TRANSCRIPTCHUNK = _descriptor.Descriptor(
  name='TranscriptChunk',
  full_name='SpeechToText.TranscriptChunk',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='asr', full_name='SpeechToText.TranscriptChunk.asr', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='transcript', full_name='SpeechToText.TranscriptChunk.transcript', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_final', full_name='SpeechToText.TranscriptChunk.is_final', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='confidence', full_name='SpeechToText.TranscriptChunk.confidence', index=3,
      number=4, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='answer', full_name='SpeechToText.TranscriptChunk.answer', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='image_url', full_name='SpeechToText.TranscriptChunk.image_url', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='image_yes_no', full_name='SpeechToText.TranscriptChunk.image_yes_no', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=103,
  serialized_end=248,
)

DESCRIPTOR.message_types_by_name['SpeechChunk'] = _SPEECHCHUNK
DESCRIPTOR.message_types_by_name['TranscriptChunk'] = _TRANSCRIPTCHUNK
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

SpeechChunk = _reflection.GeneratedProtocolMessageType('SpeechChunk', (_message.Message,), dict(
  DESCRIPTOR = _SPEECHCHUNK,
  __module__ = 'stt_pb2'
  # @@protoc_insertion_point(class_scope:SpeechToText.SpeechChunk)
  ))
_sym_db.RegisterMessage(SpeechChunk)

TranscriptChunk = _reflection.GeneratedProtocolMessageType('TranscriptChunk', (_message.Message,), dict(
  DESCRIPTOR = _TRANSCRIPTCHUNK,
  __module__ = 'stt_pb2'
  # @@protoc_insertion_point(class_scope:SpeechToText.TranscriptChunk)
  ))
_sym_db.RegisterMessage(TranscriptChunk)



_LISTENER = _descriptor.ServiceDescriptor(
  name='Listener',
  full_name='SpeechToText.Listener',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=250,
  serialized_end=342,
  methods=[
  _descriptor.MethodDescriptor(
    name='DoSpeechToText',
    full_name='SpeechToText.Listener.DoSpeechToText',
    index=0,
    containing_service=None,
    input_type=_SPEECHCHUNK,
    output_type=_TRANSCRIPTCHUNK,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_LISTENER)

DESCRIPTOR.services_by_name['Listener'] = _LISTENER

# @@protoc_insertion_point(module_scope)
