# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import stt_pb2 as stt__pb2


class ListenerStub(object):
  """The Listener service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.DoSpeechToText = channel.stream_stream(
        '/SpeechToText.Listener/DoSpeechToText',
        request_serializer=stt__pb2.SpeechChunk.SerializeToString,
        response_deserializer=stt__pb2.TranscriptChunk.FromString,
        )


class ListenerServicer(object):
  """The Listener service definition.
  """

  def DoSpeechToText(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ListenerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'DoSpeechToText': grpc.stream_stream_rpc_method_handler(
          servicer.DoSpeechToText,
          request_deserializer=stt__pb2.SpeechChunk.FromString,
          response_serializer=stt__pb2.TranscriptChunk.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'SpeechToText.Listener', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
